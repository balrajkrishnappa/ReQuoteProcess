<Activity mc:Ignorable="sap sap2010" x:Class="Test" this:Test.in_ConfigSheets="[{&quot;Settings&quot;,&quot;Constants&quot;}]" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:s="clr-namespace:System;assembly=System.Private.CoreLib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data.Common" xmlns:this="clr-namespace:" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_Config" Type="InArgument(scg:Dictionary(x:String, x:Object))" />
    <x:Property sap2010:Annotation.AnnotationText="Names of the sheets corresponding to settings and constants in the configuration file." Name="in_ConfigSheets" Type="InArgument(s:String[])" />
  </x:Members>
  <VisualBasic.Settings>
    <x:Null />
  </VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>668,863</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>Test_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="64">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>UiPath.Database</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>UiPath.Excel</x:String>
      <x:String>UiPath.DataTableUtilities</x:String>
      <x:String>UiPath.Excel.Activities</x:String>
      <x:String>System.Security</x:String>
      <x:String>UiPath.Database.Activities</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="49">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>System.Private.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Formatters</AssemblyReference>
      <AssemblyReference>System.Private.DataContractSerialization</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization.Primitives</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>UiPath.Database</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.TypeExtensions</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
      <AssemblyReference>System.ComponentModel.EventBasedAsync</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>Microsoft.Win32.Primitives</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Primitives</AssemblyReference>
      <AssemblyReference>System.Private.Xml</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.Database.Activities</AssemblyReference>
      <AssemblyReference>System.Data.SqlClient</AssemblyReference>
      <AssemblyReference>System.Data.Common</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Configuration.ConfigurationManager</AssemblyReference>
      <AssemblyReference>System.Security.Permissions</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.Runtime.InteropServices</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="Test" sap:VirtualizedContainerService.HintSize="400,798" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="ui:DatabaseConnection" Name="sybConStatus" />
      <Variable x:TypeArguments="sd:DataTable" Name="dt" />
      <Variable x:TypeArguments="x:String" Default="2206138171001" Name="PreviousBarcode" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <Assign DisplayName="Assing out_Config (initialization)" sap:VirtualizedContainerService.HintSize="338,70" sap2010:WorkflowViewState.IdRef="Assign_1">
      <Assign.To>
        <OutArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)">[in_Config]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)">[New Dictionary(of String, Object)]</InArgument>
      </Assign.Value>
    </Assign>
    <ui:ForEach x:TypeArguments="x:String" CurrentIndex="{x:Null}" DisplayName="For each configuration sheet" sap:VirtualizedContainerService.HintSize="338,61" sap2010:WorkflowViewState.IdRef="ForEach`1_1" Values="[in_ConfigSheets]">
      <ui:ForEach.Body>
        <ActivityAction x:TypeArguments="x:String">
          <ActivityAction.Argument>
            <DelegateInArgument x:TypeArguments="x:String" Name="Sheet" />
          </ActivityAction.Argument>
          <Sequence sap2010:Annotation.AnnotationText="Read settings and constants from the configuration file and add them to the Config dictionary." DisplayName="Get local settings and constants" sap:VirtualizedContainerService.HintSize="608,794" sap2010:WorkflowViewState.IdRef="Sequence_2">
            <Sequence.Variables>
              <Variable x:TypeArguments="sd:DataTable" Name="dt_SettingsAndConstants" />
            </Sequence.Variables>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:ReadRange Range="{x:Null}" AddHeaders="True" DataTable="[Dt_SettingsAndConstants]" DisplayName="Read range (Settings and Constants sheets)" sap:VirtualizedContainerService.HintSize="546,88" sap2010:WorkflowViewState.IdRef="ReadRange_1" SheetName="[Sheet]" WorkbookPath="Data\Config.xlsx" />
            <ui:ForEachRow ColumnNames="{x:Null}" CurrentIndex="{x:Null}" DataTable="[Dt_SettingsAndConstants]" DisplayName="For each configuration row" sap:VirtualizedContainerService.HintSize="546,524" sap2010:WorkflowViewState.IdRef="ForEachRow_1">
              <ui:ForEachRow.Body>
                <ActivityAction x:TypeArguments="sd:DataRow">
                  <ActivityAction.Argument>
                    <DelegateInArgument x:TypeArguments="sd:DataRow" Name="Row" />
                  </ActivityAction.Argument>
                  <If sap2010:Annotation.AnnotationText="Read non-empty rows in the sheet." Condition="[Not String.IsNullOrWhiteSpace(row(&quot;Name&quot;).ToString.Trim)]" DisplayName="If configuration row is not empty" sap:VirtualizedContainerService.HintSize="512,407" sap2010:WorkflowViewState.IdRef="If_1">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <If.Then>
                      <Assign DisplayName="Add Config key/value pair" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_2">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:Object">[in_Config(Row("Name").ToString.Trim)]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:Object">[Row("Value")]</InArgument>
                        </Assign.Value>
                      </Assign>
                    </If.Then>
                  </If>
                </ActivityAction>
              </ui:ForEachRow.Body>
            </ui:ForEachRow>
          </Sequence>
        </ActivityAction>
      </ui:ForEach.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:ForEach>
    <TryCatch DisplayName="Try initializing assets" sap:VirtualizedContainerService.HintSize="338,61" sap2010:WorkflowViewState.IdRef="TryCatch_2">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <TryCatch.Try>
        <Sequence sap2010:Annotation.AnnotationText="Get from Orchestrator the values of assets listed in the Assets sheet." DisplayName="Get Orchestrator assets" sap:VirtualizedContainerService.HintSize="630,1016" sap2010:WorkflowViewState.IdRef="Sequence_4">
          <Sequence.Variables>
            <Variable x:TypeArguments="sd:DataTable" Name="dt_Assets" />
          </Sequence.Variables>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:ReadRange Range="{x:Null}" AddHeaders="True" DataTable="[dt_Assets]" DisplayName="Read range (Assets sheet)" sap:VirtualizedContainerService.HintSize="568,88" sap2010:WorkflowViewState.IdRef="ReadRange_2" SheetName="Assets" WorkbookPath="Data\Config.xlsx" />
          <ui:ForEachRow ColumnNames="{x:Null}" CurrentIndex="{x:Null}" DataTable="[dt_Assets]" DisplayName="For each asset row" sap:VirtualizedContainerService.HintSize="568,746" sap2010:WorkflowViewState.IdRef="ForEachRow_2">
            <ui:ForEachRow.Body>
              <ActivityAction x:TypeArguments="sd:DataRow">
                <ActivityAction.Argument>
                  <DelegateInArgument x:TypeArguments="sd:DataRow" Name="row" />
                </ActivityAction.Argument>
                <TryCatch DisplayName="Try retrieving asset from Orchestrator" sap:VirtualizedContainerService.HintSize="534,629" sap2010:WorkflowViewState.IdRef="TryCatch_1">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <TryCatch.Try>
                    <Sequence DisplayName="Get asset from Orchestrator" sap:VirtualizedContainerService.HintSize="496,401" sap2010:WorkflowViewState.IdRef="Sequence_3">
                      <Sequence.Variables>
                        <Variable x:TypeArguments="ui:GenericValue" Name="AssetValue" />
                        <Variable x:TypeArguments="x:Object" Name="asset" />
                      </Sequence.Variables>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <ui:GetRobotAsset AssetName="[row(&quot;Asset&quot;).ToString]" CacheStrategy="None" DisplayName="Get Asset Value" FolderPath="[row(&quot;OrchestratorAssetFolderPath&quot;).ToString]" sap:VirtualizedContainerService.HintSize="434,168" sap2010:WorkflowViewState.IdRef="GetRobotAsset_1">
                        <ui:GetRobotAsset.TimeoutMS>
                          <InArgument x:TypeArguments="x:Int32" />
                        </ui:GetRobotAsset.TimeoutMS>
                        <ui:GetRobotAsset.Value>
                          <OutArgument x:TypeArguments="x:Object">[asset]</OutArgument>
                        </ui:GetRobotAsset.Value>
                      </ui:GetRobotAsset>
                      <Assign DisplayName="Assign asset value in Config" sap:VirtualizedContainerService.HintSize="434,82" sap2010:WorkflowViewState.IdRef="Assign_3">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:Object">[in_Config(row("Name").ToString)]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:Object">[asset]</InArgument>
                        </Assign.Value>
                      </Assign>
                    </Sequence>
                  </TryCatch.Try>
                  <TryCatch.Catches>
                    <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="500,21" sap2010:WorkflowViewState.IdRef="Catch`1_1">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <ActivityAction x:TypeArguments="s:Exception">
                        <ActivityAction.Argument>
                          <DelegateInArgument x:TypeArguments="s:Exception" Name="Exception" />
                        </ActivityAction.Argument>
                        <If sap2010:Annotation.AnnotationText="Logs a message and throw exception in case the asset is specified in the Config file, but it could not be loaded from Orchestrator." Condition="[Not String.IsNullOrWhiteSpace(Row(&quot;Name&quot;).ToString.Trim)]" DisplayName="If asset name is specified, but it cannot be retrieved" sap:VirtualizedContainerService.HintSize="412,407" sap2010:WorkflowViewState.IdRef="If_2">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                              <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <If.Then>
                            <Throw DisplayName="Throw AssetFailedToLoad Exception" Exception="[new Exception(&quot;Loading asset &quot; + Row(&quot;Asset&quot;).ToString + &quot; failed: &quot; + Exception.Message)]" sap:VirtualizedContainerService.HintSize="334,90" sap2010:WorkflowViewState.IdRef="Throw_1" />
                          </If.Then>
                        </If>
                      </ActivityAction>
                    </Catch>
                  </TryCatch.Catches>
                </TryCatch>
              </ActivityAction>
            </ui:ForEachRow.Body>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:ForEachRow>
        </Sequence>
      </TryCatch.Try>
      <TryCatch.Catches>
        <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="634,21" sap2010:WorkflowViewState.IdRef="Catch`1_2">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ActivityAction x:TypeArguments="s:Exception">
            <ActivityAction.Argument>
              <DelegateInArgument x:TypeArguments="s:Exception" Name="Exception" />
            </ActivityAction.Argument>
            <Rethrow DisplayName="Rethrow loading asset exception" sap:VirtualizedContainerService.HintSize="334,25" sap2010:WorkflowViewState.IdRef="Rethrow_1" />
          </ActivityAction>
        </Catch>
      </TryCatch.Catches>
    </TryCatch>
    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Workflows\Connect_Sybase.xaml - Invoke Workflow File" sap:VirtualizedContainerService.HintSize="338,122" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_1" UnSafe="False" WorkflowFileName="Workflows\Connect_Sybase.xaml">
      <ui:InvokeWorkflowFile.Arguments>
        <InArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="in_Config">[in_Config]</InArgument>
        <OutArgument x:TypeArguments="ui:DatabaseConnection" x:Key="sybConStatus">[sybConStatus]</OutArgument>
      </ui:InvokeWorkflowFile.Arguments>
    </ui:InvokeWorkflowFile>
    <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="338,61" sap2010:WorkflowViewState.IdRef="CommentOut_1">
      <ui:CommentOut.Body>
        <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="400,251" sap2010:WorkflowViewState.IdRef="Sequence_5">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:ExecuteQuery ContinueOnError="{x:Null}" TimeoutMS="{x:Null}" sap2010:Annotation.AnnotationText="Find SspQTStoreLabelItemItem Reorder" CommandType="StoredProcedure" DataTable="[out_SspQTStorelabelOUTPUT]" DisplayName="Run query_SspQTStoreLabelItem" ExistingDbConnection="[sybConStatus]" sap:VirtualizedContainerService.HintSize="338,129" sap2010:WorkflowViewState.IdRef="ExecuteQuery_2" Sql="[in_Config(&quot;SspQTStoreLabelItem&quot;).ToString]">
            <ui:ExecuteQuery.Parameters>
              <InArgument x:TypeArguments="x:Int32" x:Key="@inBarcode">
                <VisualBasicValue x:TypeArguments="x:Int32" ExpressionText="Cint(in_barcode)" />
              </InArgument>
              <InArgument x:TypeArguments="x:Int32" x:Key="@inRevision">
                <VisualBasicValue x:TypeArguments="x:Int32" ExpressionText="CInt(in_Config(&quot;SspQTStoreLabelItemRevisionNum&quot;).ToString)" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="@inProdCountry">
                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_dt_ProductDetails(0)(&quot;@inProdCountry&quot;).ToString" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="@inProdCode">
                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_dt_ProductDetails(0)(&quot;@inProdCode&quot;).ToString" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="@inProdClass">
                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_dt_ProductDetails(0)(&quot;@inProdClass&quot;).ToString" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="@inLabelType">
                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_dt_ProductDetails(0)(&quot;@inLabelType&quot;).ToString" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="@inLabelSubtype">
                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_dt_ProductDetails(0)(&quot;@inLabelSubtype&quot;).ToString" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="@inShape">
                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_dt_ProductDetails(0)(&quot;@inShape&quot;).ToString" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="@inSubshape">
                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_dt_ProductDetails(0)(&quot;@inSubshape&quot;).ToString" />
              </InArgument>
              <InArgument x:TypeArguments="x:Double" x:Key="@inHeight">
                <VisualBasicValue x:TypeArguments="x:Double" ExpressionText="CDbl(in_dt_ProductDetails(0)(&quot;@inHeight&quot;).ToString)" />
              </InArgument>
              <InArgument x:TypeArguments="x:Double" x:Key="@inWidth">
                <VisualBasicValue x:TypeArguments="x:Double" ExpressionText="CDbl(in_dt_ProductDetails(0)(&quot;@inWidth&quot;).ToString)" />
              </InArgument>
              <InArgument x:TypeArguments="x:Double" x:Key="@inDiameter">
                <VisualBasicValue x:TypeArguments="x:Double" ExpressionText="CDbl(in_dt_ProductDetails(0)(&quot;@inDiameter&quot;).ToString)" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="@inPaperType">
                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_dt_ProductDetails(0)(&quot;@inPaperType&quot;).ToString" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="@inPaperSubtype">
                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_dt_ProductDetails(0)(&quot;@inPaperSubtype&quot;).ToString" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="@inStockColor">
                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_dt_ProductDetails(0)(&quot;@inStockColor&quot;).ToString" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="@inBarcodeType">
                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_dt_ProductDetails(0)(&quot;@inBarcodeType&quot;).ToString" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="@inConsecDigits">
                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_dt_ProductDetails(0)(&quot;@inConsecDigits&quot;).ToString" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="@inStartingNum">
                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_dt_ProductDetails(0)(&quot;@inStartingNum&quot;).ToString" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="@inEndingNum">
                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_dt_ProductDetails(0)(&quot;@inEndingNum&quot;).ToString" />
              </InArgument>
              <InArgument x:TypeArguments="x:Int32" x:Key="@inNumResets">
                <VisualBasicValue x:TypeArguments="x:Int32" ExpressionText="CInt(in_dt_ProductDetails(0)(&quot;@inNumResets&quot;).ToString)" />
              </InArgument>
              <InArgument x:TypeArguments="x:Int32" x:Key="@inOrientation">
                <VisualBasicValue x:TypeArguments="x:Int32" ExpressionText="CInt(in_dt_ProductDetails(0)(&quot;@inOrientation&quot;).ToString)" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="@inInsideWindow">
                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_dt_ProductDetails(0)(&quot;@inInsideWindow&quot;).ToString" />
              </InArgument>
              <InArgument x:TypeArguments="x:Int32" x:Key="@inQtyRollBest">
                <VisualBasicValue x:TypeArguments="x:Int32" ExpressionText="CInt(in_dt_ProductDetails(0)(&quot;@inQtyRollBest&quot;).ToString)" />
              </InArgument>
              <InArgument x:TypeArguments="x:Int32" x:Key="@inQtyPerRoll">
                <VisualBasicValue x:TypeArguments="x:Int32" ExpressionText="CInt(in_dt_ProductDetails(0)(&quot;@inQtyPerRoll&quot;).ToString)" />
              </InArgument>
              <InArgument x:TypeArguments="x:Int32" x:Key="@inUnitM">
                <VisualBasicValue x:TypeArguments="x:Int32" ExpressionText="CInt(in_dt_ProductDetails(0)(&quot;@inUnitM&quot;).ToString)" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="@inFLOC">
                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_dt_ProductDetails(0)(&quot;@inFLOC&quot;).ToString" />
              </InArgument>
              <InArgument x:TypeArguments="x:Double" x:Key="@inCoresSize">
                <VisualBasicValue x:TypeArguments="x:Double" ExpressionText="CDbl(in_dt_ProductDetails(0)(&quot;@inCoresSize&quot;).ToString)" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="@inCoresMachine">
                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_dt_ProductDetails(0)(&quot;@inCoresMachine&quot;).ToString" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="@inHowProduced">
                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_dt_ProductDetails(0)(&quot;@inHowProduced&quot;).ToString" />
              </InArgument>
              <InArgument x:TypeArguments="x:Int32" x:Key="@inWhereProduced">
                <VisualBasicValue x:TypeArguments="x:Int32" ExpressionText="Cint(in_dt_ProductDetails(0)(&quot;@inWhereProduced&quot;).ToString)" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="@inTACode">
                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_dt_ProductDetails(0)(&quot;@inTACode&quot;).ToString" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="@inFreightZip">
                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_dt_ProductDetails(0)(&quot;@inFreightZip&quot;).ToString" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="@inPriceDisplay">
                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_dt_ProductDetails(0)(&quot;@inPriceDisplay&quot;).ToString" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="@inDescription">
                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_dt_ProductDetails(0)(&quot;@inDescription&quot;).ToString" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="@inPriceSource">
                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_dt_ProductDetails(0)(&quot;@inPriceSource&quot;).ToString" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="@inShipVia">
                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_dt_ProductDetails(0)(&quot;@inShipVia&quot;).ToString" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="@inApplication">
                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_dt_ProductDetails(0)(&quot;@inApplication&quot;).ToString" />
              </InArgument>
              <InArgument x:TypeArguments="x:Int32" x:Key="@inMultiStocks">
                <VisualBasicValue x:TypeArguments="x:Int32" ExpressionText="Cint(in_dt_ProductDetails(0)(&quot;inMultiStocks&quot;).ToString)" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="@inSetId">
                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_Config(&quot;Setid&quot;).ToString" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="@inStockNum">
                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_dt_ProductDetails(0)(&quot;@inStockNum&quot;).ToString" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="@inTintColor">
                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_dt_ProductDetails(0)(&quot;@inTintColor&quot;).ToString" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="@inStockNum2">
                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_dt_ProductDetails(0)(&quot;@inStockNum2&quot;).ToString" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="@inPaperType2">
                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_dt_ProductDetails(0)(&quot;@inPaperType2&quot;).ToString" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="@inPaperSubtype2">
                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_dt_ProductDetails(0)(&quot;@inPaperSubtype2&quot;).ToString" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="@inStockColor2">
                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_dt_ProductDetails(0)(&quot;@inStockColor2&quot;).ToString" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="@inTintColor2">
                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_dt_ProductDetails(0)(&quot;@inTintColor2&quot;).ToString" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="@inShipFromZip">
                <VisualBasicValue x:TypeArguments="x:String" ExpressionText="in_dt_ProductDetails(0)(&quot;@inShipFromZip&quot;).ToString" />
              </InArgument>
            </ui:ExecuteQuery.Parameters>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:ExecuteQuery>
        </Sequence>
      </ui:CommentOut.Body>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </ui:CommentOut>
    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="338,101" sap2010:WorkflowViewState.IdRef="LogMessage_1" Level="Info" Message="[&quot;Test&quot;]" />
  </Sequence>
</Activity>